#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элементы.ФормаЗаписатьДанные.Доступность = Ложь;	
	// ++ АК SERD #0-000036399.15
	Элементы.ФормаСохранитьПредварительно.Доступность = Ложь;
	Элементы.ФормаПоказатьПредварительныеДанные.Доступность = Ложь;
	// -- АК SERD #0-000036399.15 

КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаказПоставщикуПриИзменении(Элемент)

	ЗаказПоставщикуПриИзмененииНаСервере();

КонецПроцедуры // ЗаказПоставщикуПриИзменении() 

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите excel - файл";
	Диалог.Фильтр = "Таблицы (*.xls,*.xlsx)|*.xls;*.xlsx;|Microsoft Excel 97/2000/XP/2003 (*.xls)|*.xls|Microsoft Excel 2007/2010 (*.xlsx)|*.xlsx";
	
	Если Диалог.Выбрать() Тогда
		Объект.ПутьКФайлу = Диалог.ПолноеИмяФайла; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтличияПриИзменении(Элемент)

	ТолькоОтличияПриИзмененииНаСервере();

КонецПроцедуры // ТолькоОтличияПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьФайл(Команда)

	ОчиститьСообщения();   
	Дерево.ПолучитьЭлементы().Очистить();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СодержитПодходящуюПродукцию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В выбранном документе нет маркируемых товаров для которых предназначена обработка.");
	КонецЕсли;
	
	
	Файл = Новый Файл(Объект.ПутьКФайлу);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник)); 
	Расширение = СтрЗаменить(Файл.Расширение, ".", ""); 
	// ++ АК SERD #0-000036399.15
	ИмяФайла = Файл.Имя;
	// -- АК SERD #0-000036399.15
	
	ТабДокОшибки = Новый ТабличныйДокумент;
	
	ПрочитатьФайлНаСервере(Адрес, Расширение, ТабДокОшибки); 
	
	Если ТабДокОшибки.ВысотаТаблицы > 0 Тогда 
		ТабДокОшибки.ОтображатьСетку = Ложь;
		ТабДокОшибки.ОтображатьЗаголовки = Ложь;
		ТабДокОшибки.Показать("Ошибка загрузки данных из файла");	
	КонецЕсли;
	
	Если НЕ Отказ Тогда 
		Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
			
			Если Строка.ПлановоеКоличество <> Строка.ФактическоеКоличество Тогда
				ТекстОшибки = "Ошибка SSCC " + Строка.SSCC + ": плановое количество (" + Строка.ПлановоеКоличество + ") и фактическое (" + Строка.ФактическоеКоличество + ") количество не совпадают";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
				Отказ = Истина;
				
			ИначеЕсли Строка.Сопоставлено <> Строка.ФактическоеКоличество Тогда  
				ТекстОшибки = "Ошибка SSCC " + Строка.SSCC + ": количество сопоставлено (" + Строка.Сопоставлено + ") и фактическое (" + Строка.ФактическоеКоличество + ") количество не совпадают";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Дерево.ПолучитьЭлементы().Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дерево данных не заполнено");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаЗаписатьДанные.Доступность = Не Отказ;
	// ++ АК SERD #0-000036399.15
	Элементы.ФормаСохранитьПредварительно.Доступность = Не Отказ;
	Элементы.ФормаПоказатьПредварительныеДанные.Доступность = Не Отказ;
	// -- АК SERD #0-000036399.15

КонецПроцедуры // ПрочитатьФайл()

&НаКлиенте
Процедура ЗаписатьДанные(Команда)

	ОчиститьСообщения();   
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаписатьДанныеНаСервере();
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	//ИнтеграцияИСМПВызовСервера.ВыполнитьОбмен(ПолучитьОрганизацию());
	//ИнтеграцияИСМПКлиент.ВыполнитьОбмен(
	//	ЭтотОбъект,
	//	ПолучитьОрганизацию());
	
	
	   	   	
	Элементы.ФормаПрочитатьФайл.Доступность = Ложь;
	Элементы.ФормаЗаписатьДанные.Доступность = Ложь;
	// ++ АК SERD #0-000036399.15
	Элементы.ФормаСохранитьПредварительно.Доступность = Ложь;
	Элементы.ФормаПоказатьПредварительныеДанные.Доступность = Ложь;
	// -- АК SERD #0-000036399.15
	
	Сообщить("Виртуальная агрегация выполнена");

КонецПроцедуры // ЗаписатьДанные()

// ++ АК SERD #0-000036399.15
&НаКлиенте
Процедура СохранитьПредварительно(Команда)

	пОповещение = Новый ОписаниеОповещения("СохранитьПредварительноПослеВопроса", ЭтотОбъект);
	пСуществующиеЗаписи = ПолучитьЗаписиПоИмениФайла(ИмяФайла);
	
	Если пСуществующиеЗаписи.Количество() Тогда
		пШаблон = НСтр("ru='Пак лист %1 уже был загружен в систему
						|%2.
						|Пак лист %1 является новым пак листом?'");
		
		пШаблонЗаписи = НСтр("ru='%1 пользователем %2'");
		
		пТекст = Новый Массив;
		
		Для Каждого пЗапись Из пСуществующиеЗаписи Цикл
			пДата = Формат(пЗапись.Дата, "ДФ='dd.MM.yyyy HH:mm'; ДП='Нет даты'");
			пСтрока = СтрШаблон(пШаблонЗаписи, пДата, пЗапись.Ответственный);
			пТекст.Добавить(пСтрока);
		КонецЦикла;
		
		пТекст = СтрСоединить(пТекст, "," + Символы.ПС);
		пТекст = СтрШаблон(пШаблон, ИмяФайла, пТекст);
		
		ПоказатьВопрос(пОповещение, пТекст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(пОповещение, КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры // СохранитьПредварительно()

&НаКлиенте
Процедура ПоказатьПредварительныеДанные(Команда)

	пПометка = Не Элементы.ФормаПоказатьПредварительныеДанные.Пометка;
	Элементы.ФормаПоказатьПредварительныеДанные.Пометка = пПометка;
	
	Если пПометка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПредварительныеДанные;
		ПредварительныеДанные_Заполнить();
		Элементы.ПредварительныеДанные.Обновить();
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	КонецЕсли;

КонецПроцедуры // ПоказатьПредварительныеДанные()

&НаКлиенте
Процедура ПредварительныеДанные_Флажки(Команда)

	пЗначение = (Команда = Команды.ПредварительныеДанные_УстановитьФлажки);
	
	Для Каждого пСтрока Из ПредварительныеДанные.ПолучитьЭлементы() Цикл
		пСтрока.Выбран = пЗначение;
	КонецЦикла;

КонецПроцедуры // ПредварительныеДанные_Флажки()

&НаКлиенте
Процедура ПредварительныеДанные_Очистить(Команда)

	ПредварительныеДанные_ОчиститьНаСервере();
	ПредварительныеДанные_Заполнить();

КонецПроцедуры // ПредварительныеДанные_Очистить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет таблицу вложенных штрихкодов упаковки.
// 
// Параметры:
// 	ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
// 	ВложенныеШтрихкоды - Массив, элементы - СправочникСсылка.ШтрихкодыУпаковокТоваров
Процедура ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, ВложенныеШтрихкоды = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	//НачатьТранзакцию();
	
	// попытка внутри попытки - не работает. убрано.
	//Попытка
		
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		//ЭлементБлокировки.УстановитьЗначение("Ссылка", ШтрихкодУпаковки);
		//Блокировка.Заблокировать();
		
		ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
		//ШтрихкодУпаковкиОбъект.ХешСумма = "";
		
		Если ВложенныеШтрихкоды <> Неопределено Тогда
			ШтрихкодУпаковкиОбъект.ВложенныеШтрихкоды.Очистить();
			Для Каждого Штрихкод Из ВложенныеШтрихкоды Цикл
				Строка = ШтрихкодУпаковкиОбъект.ВложенныеШтрихкоды.Добавить();
				Строка.Штрихкод = Штрихкод;
			КонецЦикла;
		КонецЕсли;
		
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьХешСумму", Истина);
		
		ШтрихкодУпаковкиОбъект.Записать();
		
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//	ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Запись штрихкода упаковки';
	//	|en = 'ГосИС: Запись штрихкода упаковки'", ОбщегоНазначения.КодОсновногоЯзыка());
	//	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
	//	
	//	ВызватьИсключение ПодробноеПредставлениеОшибки;
	//	
	//КонецПопытки;

КонецПроцедуры // ИзменитьШтрихкодУпаковки()

// Добавляет выделение отличий данных в ИБ и файле
//
&НаСервере
Процедура ТолькоОтличияПриИзмененииНаСервере()

	УсловноеОформление.Элементы[3].Использование = Объект.ТолькоОтличия;

КонецПроцедуры // ТолькоОтличияПриИзмененииНаСервере()

// Записывает данные после виртуальной агрегации в информационной базе.
//
&НаСервере
Процедура ЗаписатьДанныеНаСервере()

	// Вставить содержимое обработчика.  
	Отказ = Ложь;  
	
	// ++ СОК 
	Видпродукции = ВидПродукцииИС;
	// -- СОК
	
	ДеревоЗначений  = РеквизитФормыВЗначение("Дерево"); 
	
	м = 0;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого КорневаяСтрокаДерева Из ДеревоЗначений.Строки Цикл
			
			МассивВложенныхШтрихкодов = Новый Массив;
			
			Для Каждого СтрокаКодаМаркировки Из КорневаяСтрокаДерева.Строки Цикл 
				
				м = м + 1;
				
				РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаКодаМаркировки.МаркаФакт, Видпродукции);
				
				Если РезультатРазбора = Неопределено Тогда
					ВызватьИсключение "Не удалось разобрать код маркировки: "+СтрокаКодаМаркировки.МаркаФакт;
				КонецЕсли;
				
				НормализованныйКодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
				Если ПустаяСтрока(НормализованныйКодМаркировки) Тогда
					
					МассивВложенныхШтрихкодов.Добавить(СоздатьШтрихкод(РезультатРазбора, СтрокаКодаМаркировки, ВидПродукции, МассивВложенныхШтрихкодов));
					Продолжить; 
					
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
				|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
				|ГДЕ
				|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода";
				
				Запрос.УстановитьПараметр("ЗначениеШтрихкода", НормализованныйКодМаркировки);
				
				РезультатЗапроса = Запрос.Выполнить(); 
				
				Если РезультатЗапроса.Пустой() Тогда
					
					МассивВложенныхШтрихкодов.Добавить(СоздатьШтрихкод(РезультатРазбора, СтрокаКодаМаркировки, ВидПродукции, МассивВложенныхШтрихкодов));
					Продолжить; 
					
				КонецЕсли;
				
				ШтрихкодНайден = Ложь;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.ЗначениеШтрихкода = РезультатРазбора.НормализованныйКодМаркировки Тогда 
						МассивВложенныхШтрихкодов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
						ШтрихкодНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ШтрихкодНайден Тогда 
					МассивВложенныхШтрихкодов.Добавить(СоздатьШтрихкод(РезультатРазбора, СтрокаКодаМаркировки, ВидПродукции, МассивВложенныхШтрихкодов));
				КонецЕсли;
				
			КонецЦикла;  
			
			ИзменитьШтрихкодУпаковки(КорневаяСтрокаДерева.SSCC, МассивВложенныхШтрихкодов);  
			
			// ++ АК MOSD #SD-85
			ИзменитьПулКодовМаркировки(КорневаяСтрокаДерева.SSCC, МассивВложенныхШтрихкодов);
			// -- АК MOSD #SD-85
			
		КонецЦикла;
		
		УдалитьИзПлана();
		//ОтменитьТранзакцию(); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию(); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция не выполнена: " + ОписаниеОшибки());
		Отказ = Истина;	
	КонецПопытки; 
	
	// ++ АК SERD #0-000036399.15 
	
	//Удаляем в другом месте
	
	Если Не Отказ Тогда 
		
		СохранитьПредварительноНаСервере();
	КонецЕсли;
	
	// -- АК SERD #0-000036399.15

КонецПроцедуры // ЗаписатьДанныеНаСервере()

// Создает штрихкод для упаковки по заданным данным.
//
// Параметры:
//  РезультатРазбора			 - Структура - см. РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
//  СтрокаКодаМаркировки		 - СтрокаДереваЗначений - ЭтотОбъект.Дерево
//  ВидПродукции				 - ПеречислениеСсылка.ВидыПродукцииИС
//  МассивВложенныхШтрихкодов	 - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров 
// 
// Возвращаемое значение:
//   - СправочникСсылка.ШтрихкодыУпаковокТоваров - созданный штрихкод для строки маркировки 
//
&НаСервере
Функция СоздатьШтрихкод(РезультатРазбора, СтрокаКодаМаркировки, ВидПродукции, МассивВложенныхШтрихкодов)

	ХешСуммаНормализации = ИнтеграцияИС.ХешированиеДанныхSHA256(РезультатРазбора.НормализованныйКодМаркировки);
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();  
	ДанныеНовойУпаковки.ВидПродукции = ВидПродукции;
	ДанныеНовойУпаковки.Штрихкод     = РезультатРазбора.НормализованныйКодМаркировки;
	ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
	ДанныеНовойУпаковки.ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	ДанныеНовойУпаковки.Номенклатура   = СтрокаКодаМаркировки.Номенклатура;
	ДанныеНовойУпаковки.Характеристика = Неопределено;
	ДанныеНовойУпаковки.Серия          = Неопределено;
	ДанныеНовойУпаковки.ТипШтрихкода   = РезультатРазбора.ТипШтрихкода; 
	
	ДанныеНовойУпаковки.Количество = 1;  
	
	СсылкаНаШтрихкод = АК_СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаШтрихкод;

КонецФункции // СоздатьШтрихкод() 

// ++ АК Мамонтов Е.Ю. 04.04.2025 SPVI-751

// Создает новый элемент справочник по переданным параметрам.
// 
// Параметры:
// 	ДанныеШтрихкодаУпаковки - Структура - Описание:
// * Ответственный - Справочникссылка.Пользователи - 
// * ДатаУпаковки - Дата -
// * Количество - Число -
// * Серия - ОпределяемыйТип.СерияНоменклатуры- 
// * Упаковка - ОпределяемыйТип.Упаковка - 
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - 
// * Номенклатура - ОпределяемыйТип.Номенклатура - 
// * ХешСумма - Строка -
// * Штрихкод - Строка -
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - 
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - 
// * ВидПродукции - Перечислениессылка.ВидыПродукцииИС - 
// 	ПараметрыСоздания - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок
// Возвращаемое значение:
// 	СправочникСсылка.ШтрихкодыУпаковокТоваров - Описание
Функция АК_СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки,
	ПараметрыСоздания = Неопределено) 
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(ДанныеШтрихкодаУпаковки.Штрихкод) Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваровПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	НовыйЭлемент.Номенклатура   = ДанныеШтрихкодаУпаковки.Номенклатура;
	НовыйЭлемент.Характеристика = Неопределено;
	НовыйЭлемент.Серия          = Неопределено;
	
	СтатусУказанияСерий = Неопределено;
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
								НовыйЭлемент, Справочники.ШтрихкодыУпаковокТоваров);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НовыйЭлемент, ПараметрыУказанияСерий);
		
	НовыйЭлемент.Серия = ДанныеШтрихкодаУпаковки.Серия;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДанныеШтрихкодаУпаковки,,"Номенклатура, Характеристика, Серия");
	
	НовыйЭлемент.ЗначениеШтрихкода = ДанныеШтрихкодаУпаковки.Штрихкод;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ТипШтрихкода) Тогда
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			НовыйЭлемент.ЗначениеШтрихкода, ДанныеШтрихкодаУпаковки.ВидПродукции, ПримечаниеКРезультатуРазбора);
		Если ДанныеРазбора <> Неопределено Тогда
			НовыйЭлемент.ТипШтрихкода = ДанныеРазбора.ТипШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
		НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтключитьПоискСуществующего = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыСоздания, "ОтключитьПоискСуществующего", Ложь);
	
	Если ЗначениеЗаполнено(НовыйЭлемент.ЗначениеШтрихкода) И Не ОтключитьПоискСуществующего Тогда
		
		НовоеЗначениеШтрихкода = НовыйЭлемент.ЗначениеШтрихкода;
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовоеЗначениеШтрихкода);
		
		Если ДанныеУпаковки <> Неопределено
			И ДанныеУпаковки.ЗначениеШтрихкода = НовоеЗначениеШтрихкода  // с учетом регистра
			И Не ЭтоПустаяУпаковка(ДанныеУпаковки) Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Элемент справочника со значением штрихкода %1 уже существует.
					       |Необходимо использовать другое значение штрихкода.';
					       |en = 'Элемент справочника со значением штрихкода %1 уже существует.
					       |Необходимо использовать другое значение штрихкода.'"),
				НовыйЭлемент.ЗначениеШтрихкода);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции    // СоздатьШтрихкодУпаковки

//Возвращает данные справочника. Если элемент не найден, возвращает Неопределено.
//
//Параметры:
//   ЗначениеШтрихкода - Строка - ключ поиска.
//
//Возвращаемое значение:
//   Неопределено - .
//   Структура - 
//
Функция ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода)
	
	Упаковка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Упаковка
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
		|	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", ЗначениеШтрихкода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Упаковка = ВыборкаДетальныеЗаписи.Упаковка;
	КонецЕсли;
	
	Возврат Упаковка;
	
КонецФункции  

Функция ЭтоПустаяУпаковка(ДанныеУпаковки)
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеУпаковки.ТипУпаковки) Тогда
		Возврат ПустаяСтрока(ДанныеУпаковки.ХешСумма);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// -- АК Мамонтов Е.Ю. 04.04.2025 SPVI-751

// Определяет содержит ли заказ поставщику номенклатуры видов продукции, для которых предназначена обюработка.
// 
// Возвращаемое значение:
//   - Булево - истина, если нужный вид продукции содержится в заказе поставщику.
//
&НаСервере
Функция СодержитПодходящуюПродукцию()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуТовары.Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Объект.ЗаказПоставщику);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Флаг = Ложь;
	ВидПродукцииИС = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВыборкаДетальныеЗаписи.ОсобенностьУчета);
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.СоковаяПродукция;
			Прервать; 
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво;
			Прервать; 
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
			Прервать;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды;
	
			Прервать;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.РастительныеМасла;
			Прервать; 
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС;
			Прервать;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			Флаг = Истина; 
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;

КонецФункции // СодержитПодходящуюПродукцию()

// ++ АК MOSD #SD-85

// Изменяет значение ШтрихкодУпаковки для марок в Пуле маркировок СУЗ  
//
// Параметры:
//  ШтрихкодУпаковки			 - Строка - Штрихкод упаковки
//  МассивВложенныхШтрихкодов	 - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкоды индивидуальных упаковок
//
Процедура ИзменитьПулКодовМаркировки(ШтрихкодУпаковки, МассивВложенныхШтрихкодов)

	Если МассивВложенныхШтрихкодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.ДокументОснование КАК ДокументОснование,
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ДокументОснование = &ЗаказПоставщику
		|	И ШтрихкодыУпаковокТоваров.Ссылка В(&МассивВложенныхШтрихкодов)";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("МассивВложенныхШтрихкодов", МассивВложенныхШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
					
		//НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		//ЗаполнитьЗначенияСвойств(НаборЗаписей.Отбор, ВыборкаДетальныеЗаписи);
		//НаборЗаписей.Прочитать();
		//		
		//Для Каждого Запись Из НаборЗаписей Цикл
		//	 Запись.ШтрихкодУпаковки = ШтрихкодУпаковки;
		//КонецЦикла;
		//
		//НаборЗаписей.Записать();
	
		МенеджерЗаписи = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.ШтрихкодУпаковки = ШтрихкодУпаковки;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;

КонецПроцедуры // ИзменитьПулКодовМаркировки()

// Читает данные из файла и сопоставляет с данными базы, проверяет  корректность сопоставления.
// 
// Параметры:
//  Адрес                   - Строка            - адрес файла во временном хранилище.
//  Расширение              - Строка            - расширение читаемого файла
//  ТабДокОшибки 			- ТабличныйДокумент - табличный документ для вывода расшифровки ошибок пользователю.
// 
&НаСервере
Процедура ПрочитатьФайлНаСервере(Адрес, Расширение, ТабДокОшибки)

	Файл = ПолучитьИзВременногоХранилища(Адрес);  
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	Файл.Записать(ИмяВременногоФайла); 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ОбластьЗагрузки = СтрЗаменить(Объект.Страница, " ", "_"); 
	ДанныеЗагружаемойТаблицы = ТабличныйДокумент.ПолучитьОбласть(ОбластьЗагрузки); 	
	
	КоличествоСтрок = ДанныеЗагружаемойТаблицы.ВысотаТаблицы; 	 
	КоличествоСтрокТабДок = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ВременнаяТаблица = СоздатьВременнуюТаблицу();
	
	Строка_50 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)); 
	ВременнаяТаблица.Колонки.Добавить("ХешСуммаКодаМаркировки", Строка_50);
	
	ТаблицаОшибок =  Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки");
	ТаблицаОшибок.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаОшибок.Колонки.Добавить("КодМаркировки");  
	ТаблицаОшибок.Колонки.Добавить("GTIN");
	ТаблицаОшибок.Колонки.Добавить("АК_НомерSAP");
	ТаблицаОшибок.Колонки.Добавить("Наименование");
	ТаблицаОшибок.Колонки.Добавить("Количество");
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	
	// ++ СОК
	//ВидПродукции = ПолучитьВидПродукции(); 
	Видпродукции = ВидПродукцииИС;
	// -- СОК 
	
	Отказ = Ложь;
	Для сч = Объект.НомерСтроки По КоличествоСтрок Цикл 
		    ДанныеЯчейки_КодКоробки = Неопределено;
			ДанныеЯчейки_КодМаркировки = Неопределено;
		Попытка			
			
			Если ДанныеЗагружаемойТаблицы.ПолучитьОбласть("R" + Формат(сч, "ЧГ=0;") + "C" + 1).ТекущаяОбласть.Текст = "" Тогда
				Продолжить;				
			КонецЕсли;
			
			
			ДанныеЯчейки_КодКоробки 	= СокрЛП(ДанныеЗагружаемойТаблицы.ПолучитьОбласть("R" + Формат(сч, "ЧГ=0;") + "C" + 1).ТекущаяОбласть.Текст);
			ДанныеЯчейки_КодМаркировки	= СокрЛП(ДанныеЗагружаемойТаблицы.ПолучитьОбласть("R" + Формат(сч, "ЧГ=0;") + "C" + 2).ТекущаяОбласть.Текст);
			ДанныеЯчейки_ДатаРозлива	= СокрЛП(ДанныеЗагружаемойТаблицы.ПолучитьОбласть("R" + Формат(сч, "ЧГ=0;") + "C" + 3).ТекущаяОбласть.Текст);
			
			//++ АК Остапенко Е.А. 27.01.2025 РТС-74
			ДанныеЯчейки_ПолныйКод = СтрЗаменить(ДанныеЯчейки_КодМаркировки,"(01)", "01");
			ДанныеЯчейки_ПолныйКод = СтрЗаменить(ДанныеЯчейки_ПолныйКод,"(21)", "21");
			ДанныеЯчейки_ПолныйКод = СтрЗаменить(ДанныеЯчейки_ПолныйКод,"(92)", "92");
			//-- АК Остапенко Е.А. 27.01.2025 РТС-74
			
			ДанныеЯчейки_КодМаркировки = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ДанныеЯчейки_КодМаркировки);
			ДанныеЯчейки_КодМаркировки = СтрЗаменить(ДанныеЯчейки_КодМаркировки, "_x001D_", "");
			
			ДанныеЯчейки_ПолныйКод = СтрЗаменить(ДанныеЯчейки_ПолныйКод, "_x001D_", "");
			
			// -- СОК
			ДанныеЯчейки_GTIN = Неопределено;
			РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ДанныеЯчейки_КодМаркировки, Видпродукции);
			Если РезультатРазбора <> Неопределено Тогда
				ДанныеЯчейки_КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
				ДанныеЯчейки_GTIN = РезультатРазбора.СоставКодаМаркировки.GTIN;
			Иначе 
				//++ АК Остапенко Е.А. 27.01.2025 РТС-74
				Если СтрНачинаетсяС(ДанныеЯчейки_КодМаркировки,"(") Тогда
					АльтернативныйВариантКодМаркировки = Лев(ДанныеЯчейки_КодМаркировки, 35);
				Иначе 
					АльтернативныйВариантКодМаркировки = Лев(ДанныеЯчейки_КодМаркировки, 31);
				КонецЕсли;
				//-- АК Остапенко Е.А. 27.01.2025 РТС-74
				РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(АльтернативныйВариантКодМаркировки, Видпродукции);
				Если РезультатРазбора <> Неопределено Тогда
					ДанныеЯчейки_КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
					ДанныеЯчейки_GTIN = РезультатРазбора.СоставКодаМаркировки.GTIN;
				КонецЕсли;
			КонецЕсли;
			// ++ СОК	
	
			// ++АК dfaleleev 09.02.2024 						    
			Если Не СтрНачинаетсяС(ДанныеЯчейки_КодКоробки, "(00)") Тогда 
				ДанныеЯчейки_КодКоробки = "(00)" + ДанныеЯчейки_КодКоробки;
			КонецЕсли;
			// --АК dfaleleev 09.02.2024
			
			НоваяСтрока = ВременнаяТаблица.Добавить(); 
			НоваяСтрока.НомерСтроки 	= сч;
			НоваяСтрока.КодКоробки 		= ДанныеЯчейки_КодКоробки; 
			НоваяСтрока.КодМаркировки 	= ДанныеЯчейки_КодМаркировки;
			НоваяСтрока.ДатаРозлива 	= ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДанныеЯчейки_ДатаРозлива);
			НоваяСтрока.GTINФакт		= ДанныеЯчейки_GTIN; 
			НоваяСтрока.ПолныйКод 		= ДанныеЯчейки_ПолныйКод;
			
			КоличествоСтрокТабДок = КоличествоСтрокТабДок + 1;
			
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось загрузить строку  %1.'"), Строка(сч));
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
			НоваяСтрокаОшибки = ТаблицаОшибок.Добавить(); 
			НоваяСтрокаОшибки.НомерСтроки = сч;
			НоваяСтрокаОшибки.ШтрихкодУпаковки = ДанныеЯчейки_КодКоробки;
			НоваяСтрокаОшибки.КодМаркировки = ДанныеЯчейки_КодМаркировки;  
			НоваяСтрокаОшибки.GTIN = ДанныеЯчейки_GTIN;
			НоваяСтрокаОшибки.АК_НомерSAP = Неопределено;
			НоваяСтрокаОшибки.Наименование = Неопределено;
			НоваяСтрокаОшибки.Количество = Неопределено;
			НоваяСтрокаОшибки.ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			
			Отказ = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьДанныеПлановымиПоказателямиОптимизация(ВременнаяТаблица, ТаблицаОшибок, Отказ);

	Для Каждого ВремСтрока Из ВременнаяТаблица Цикл
		ВремСтрока.ХешСуммаКодаМаркировки    = ИнтеграцияИС.ХешированиеДанныхSHA256(ВремСтрока.КодМаркировки);
	КонецЦикла;
	ВременнаяТаблица.Сортировать("ШтрихкодУпаковки");
	
	ВыполнитьПроверкиЛентыОптимизирование(ВременнаяТаблица, ТаблицаОшибок,  Отказ);
	
	Если ТаблицаОшибок.Количество() > 0 Тогда 
		ЗаполнитьТабДокОшибок(ТаблицаОшибок, ТабДокОшибки);
	КонецЕсли;
	
	// Таблица ошибок может содержать неблокирующие ошибки. Отказ - признак прекращения работы.
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Поиск данных во временной таблице   
	ПромежуточнаяТаблица = ВременнаяТаблица.Скопировать(, "ШтрихкодУпаковки,Номенклатура,GTINПлан,Количество"); 
	ПромежуточнаяТаблица.Свернуть("ШтрихкодУпаковки,Номенклатура,GTINПлан,Количество");  
	//ПромежуточнаяТаблица.Сортировать("Количество Убыв");
	ПромежуточнаяТаблица.Сортировать("ШтрихкодУпаковки");
	
	ИтоговаяТаблица = СоздатьВременнуюТаблицу();

	к = 0;
	Для Каждого СтрокаПромежуточнойТаблицы Из ПромежуточнаяТаблица Цикл
		
		Если ПустаяСтрока(СтрокаПромежуточнойТаблицы.GTINПлан) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ШтрихкодУпаковки, GTINПлан");
		Отбор.ШтрихкодУпаковки = СтрокаПромежуточнойТаблицы.ШтрихкодУпаковки; 
		Отбор.GTINПлан = СтрокаПромежуточнойТаблицы.GTINПлан; 
		РезультатОтбора = ИтоговаяТаблица.НайтиСтроки(Отбор);
		Если РезультатОтбора.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПромежуточнойТаблицы.Количество = 0 Тогда
		
			к = к + 1;
		
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПромежуточнойТаблицы);
			НоваяСтрока.ФактическоеКоличество = 1;
			НоваяСтрока.НеСопоставлено = 1;
			НоваяСтрока.НомерСтроки = к;
			
			Продолжить;
		КонецЕсли; 
		
		Для Счетчик = 1 По СтрокаПромежуточнойТаблицы.Количество Цикл
		
			к = к + 1;
		
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПромежуточнойТаблицы);
			НоваяСтрока.ПлановоеКоличество = 1;
			НоваяСтрока.ФактическоеКоличество = 0;
			НоваяСтрока.НеСопоставлено = 1;
			НоваяСтрока.НомерСтроки = к;
		КонецЦикла;
		
	КонецЦикла;  
	
	ТабУпаковки = ВременнаяТаблица.Скопировать(, "ШтрихкодУпаковки");
	ТабУпаковки.Свернуть("ШтрихкодУпаковки");
	МассивУпаковки = ТабУпаковки.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	н = 0;
	Для Каждого Упаковка Из МассивУпаковки Цикл  
		ОтборУпаковки = Новый Структура("ШтрихкодУпаковки");
		ОтборУпаковки.ШтрихкодУпаковки = Упаковка; 
		МассивУпаковкиВременнаяТаблица = ВременнаяТаблица.НайтиСтроки(ОтборУпаковки);
		МассивУпаковкиИтоговаяТаблица = ИтоговаяТаблица.НайтиСтроки(ОтборУпаковки);
		ИтоговаяТаблицаУпаковки = ИтоговаяТаблица.Скопировать(МассивУпаковкиИтоговаяТаблица);
	
		Для Каждого Строка Из МассивУпаковкиВременнаяТаблица Цикл  
			
			Отбор = Новый Структура("ШтрихкодУпаковки, GTINПлан, GTINФакт");
			Отбор.ШтрихкодУпаковки = Строка.ШтрихкодУпаковки; 
			Отбор.GTINПлан = Строка.GTINПлан; 
			Отбор.GTINФакт = "";
			
			РезультатОтбора = ИтоговаяТаблицаУпаковки.НайтиСтроки(Отбор);
			Если РезультатОтбора.Количество() = 0 Тогда 
				
				Если Не ПустаяСтрока(Строка.GTINФакт) Тогда 
					НоваяСтрока = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);  
					НоваяСтрока.МаркаФакт = Строка.КодМаркировки;
					НоваяСтрока.НеСопоставлено = 1; 
					НоваяСтрока.ФактическоеКоличество = 1;
				КонецЕсли;
				Продолжить;
				
			КонецЕсли;
			
			СтрокаИтоговойТаблицы = ИтоговаяТаблица[н];
				СтрокаИтоговойТаблицы.GTINФакт = Строка.GTINФакт; 
				СтрокаИтоговойТаблицы.Сопоставлено = 1; 
				СтрокаИтоговойТаблицы.НеСопоставлено = 0;
				СтрокаИтоговойТаблицы.ФактическоеКоличество = 1;
				СтрокаИтоговойТаблицы.КодМаркировки = Строка.КодМаркировки; 
				СтрокаИтоговойТаблицы.МаркаФакт = Строка.КодМаркировки;
				
			н = н + 1;
				
		КонецЦикла; 
	КонецЦикла; 
	
	Итоги = ИтоговаяТаблица.Скопировать( , "ШтрихкодУпаковки, Номенклатура, Сопоставлено, НеСопоставлено, ПлановоеКоличество, ФактическоеКоличество");
	Итоги.Свернуть("ШтрихкодУпаковки, Номенклатура", "Сопоставлено, НеСопоставлено, ПлановоеКоличество, ФактическоеКоличество");	
	
	ДеревоЗначений  = РеквизитФормыВЗначение("Дерево"); 
	
	ВременнаяТаблица.Индексы.Добавить("КодМаркировки");
	
	Для Каждого СтрокаКорневогоУзла Из Итоги Цикл   
		
		// Уровень 1
		УзелКорень = ДеревоЗначений.Строки.Добавить(); 
		УзелКорень.SSCC = СтрокаКорневогоУзла.ШтрихкодУпаковки;                             
		УзелКорень.Номенклатура = СтрокаКорневогоУзла.Номенклатура;
		УзелКорень.Сопоставлено = СтрокаКорневогоУзла.Сопоставлено;
		УзелКорень.НеСопоставлено = СтрокаКорневогоУзла.НеСопоставлено;
		УзелКорень.ПлановоеКоличество = СтрокаКорневогоУзла.ПлановоеКоличество;
		УзелКорень.ФактическоеКоличество = СтрокаКорневогоУзла.ФактическоеКоличество;
		
		РезультаОтбораДетальныеЗаписи = ИтоговаяТаблица.НайтиСтроки( Новый Структура("ШтрихкодУпаковки, Номенклатура, ", СтрокаКорневогоУзла.ШтрихкодУпаковки, СтрокаКорневогоУзла.Номенклатура) );  
		
		Для Каждого СтрокаОтбораДетальныеЗаписи Из РезультаОтбораДетальныеЗаписи Цикл 
			
			// Уровень 2	
			УзелДетальныеЗаписи = УзелКорень.Строки.Добавить(); 
			ЗаполнитьЗначенияСвойств(УзелДетальныеЗаписи, СтрокаОтбораДетальныеЗаписи);
			УзелДетальныеЗаписи.SSCC = СтрокаОтбораДетальныеЗаписи.ШтрихкодУпаковки;
			
			// ++ СОК: Заполнения даты производства
			НайденнаяСтрока = ВременнаяТаблица.Найти(УзелДетальныеЗаписи.МаркаФакт, "КодМаркировки");
			Если НайденнаяСтрока <>  Неопределено Тогда 
				УзелДетальныеЗаписи.ДатаРозлива = НайденнаяСтрока.ДатаРозлива         
			КонецЕсли;
			// -- СОК	
			
		КонецЦикла;
		
	КонецЦикла;
	
	//++АК Вытовтов А.Ю. РТС-6175 SPVI-747 11.03.2025
	ПронумероватьДерево(ДеревоЗначений);
	//--АК Вытовтов А.Ю. РТС-6175 SPVI-747 11.03.2025
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "Дерево");

КонецПроцедуры // ПрочитатьФайлНаСервере()

//++АК Вытовтов А.Ю. РТС-6175 SPVI-747 11.03.2025
Процедура ПронумероватьДерево(ДеревоЗначений)
	НомерВерхний = 1;
	НомерНижний = 1;
	Для Каждого Стр Из ДеревоЗначений.Строки Цикл
		Стр.Номер = НомерВерхний;
		Для Каждого ПодСтр Из Стр.Строки Цикл
			ПодСтр.Номер = НомерНижний;
			НомерНижний = НомерНижний + 1;
		КонецЦикла;
		НомерВерхний = НомерВерхний + 1;
	КонецЦикла;
КонецПроцедуры
//--АК Вытовтов А.Ю. РТС-6175 SPVI-747 11.03.2025

// Изменяет признак плановости для штрихкодов в АК_ПлановыеШтрихкодыУпаковок
//
&НаСервере
Процедура УдалитьИзПлана()

	УстановитьПривилегированныйРежим(Истина);        
	ДеревоЗначений  = РеквизитФормыВЗначение("Дерево");
	Для Каждого КорневаяСтрокаДерева Из ДеревоЗначений.Строки Цикл
		
		Для каждого Строка Из КорневаяСтрокаДерева.Строки Цикл 
					
			НаборЗаписей = РегистрыСведений.АК_ПлановыеШтрихкодыУпаковок.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.ШтрихкодУпаковкиТоваров.Установить(КорневаяСтрокаДерева.SSCC); 
			НаборЗаписей.Отбор.ЗаказПоставщику.Установить(Объект.ЗаказПоставщику); 
			НаборЗаписей.Отбор.GTIN.Установить(Строка.GTINПлан);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				СтрокаНабора.План = Ложь; 
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // УдалитьИзПлана()

// Формирует табличный документ расшифроки ошибок.
// 
// Параметры:
//  ТаблицаОшибок - ТаблицаЗначений   - содержит ошибки, которые необходимо вывести.
//  ТабДокОшибки  - ТабличныйДокумент - табличный документ для вывода расшифровки ошибок 
// 
&НаСервере
Процедура ЗаполнитьТабДокОшибок(ТаблицаОшибок, ТабДокОшибки)
	
	ТаблицаОшибок.Сортировать("НомерСтроки");

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");	
	Макет = ОбъектОбработки.ПолучитьМакет("Макет");
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	
	ТабДокОшибки.Очистить();
	ТабДокОшибки.Вывести(ОбластьШапка);
	
	Для Каждого Строка Из ТаблицаОшибок Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ТабДокОшибки.Вывести(ОбластьСтрока);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабДокОшибок()

// ++ АК SERD #0-000036399.15

// Возвращет состав паклиста по имени файла из регистра АК_СоставПакЛиста_Сок
//
// Параметры:
//  ИмяФайла - Строка 
// 
// Возвращаемое значение:
//   - Массив из структур:
//     	*Ответственный  - СправочникСсылка.Пользователи
//     	*Дата 			- Дата
//
&НаСервереБезКонтекста
Функция ПолучитьЗаписиПоИмениФайла(ИмяФайла)

	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		пТекст = НСтр("ru='Пустое имя файла'");
		ВызватьИсключение пТекст;
	КонецЕсли;
	
	пРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеФайла", ИмяФайла);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ответственный КАК Ответственный,
		|	Т.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.АК_СоставПакЛиста_Сок КАК Т
		|ГДЕ
		|	Т.НаименованиеФайла = &НаименованиеФайла
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Ответственный,
		|	Т.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		пСтруктура = Новый Структура("Ответственный,Дата");
		ЗаполнитьЗначенияСвойств(пСтруктура, Выборка);
		пРезультат.Добавить(пСтруктура);
	КонецЦикла;
	
	Возврат пРезультат;

КонецФункции // ПолучитьЗаписиПоИмениФайла()

// Процедура - Сохранить предварительно после вопроса
//
// Параметры:
//  Результат	 - КодВозвратаДиалога - ответ пользователя на заданный вопрос. 
//  Параметры	 - Структура 
//
&НаКлиенте
Процедура СохранитьПредварительноПослеВопроса(Результат, Параметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	пРезультат = СохранитьПредварительноНаСервере();
	
	Если пРезультат.Ошибка Тогда
		пЗаголовок = НСтр("ru='Новый пак лист %1 не удалось загрузить.'");
		пЗаголовок = СтрШаблон(пЗаголовок, ИмяФайла);
		
		пРезультат.ТабличныйДокумент.ОтображатьСетку = Ложь;
		пРезультат.ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		пРезультат.ТабличныйДокумент.Показать(пЗаголовок);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Сохранено'"));
	КонецЕсли;

КонецПроцедуры // СохранитьПредварительноПослеВопроса()

// Функция - Сохранить предварительно на сервере
// Исходные данные помещаются в регистр АК_СоставПакЛиста_Сок 
// 
// 
// Возвращаемое значение:
//   - Структура:
//      *Ошибка 			- Булево
//      *ТабличныйДокумент  - ТабличныйДокумент  
//
&НаСервере
Функция СохранитьПредварительноНаСервере()

	пРезультат = Новый Структура("Ошибка, ТабличныйДокумент");
	
	пОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
	
	пТаблицаЗначений = Новый ТаблицаЗначений;
	пТаблицаЗначений.Колонки.Добавить("SSCCКод",       пОписаниеТипа);
	пТаблицаЗначений.Колонки.Добавить("КодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Строка_50 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)); 
	пТаблицаЗначений.Колонки.Добавить("ХешСуммаКодаМаркировки", Строка_50);

	// ++ СОК
	пТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	пТаблицаЗначений.Колонки.Добавить("ДатаПроизводства", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); 
	Видпродукции = ВидПродукцииИС;
	// -- СОК
	пДерево = РеквизитФормыВЗначение("Дерево");
	
	Для Каждого КорневаяСтрокаДерева Из пДерево.Строки Цикл
		Для каждого Строка Из КорневаяСтрокаДерева.Строки Цикл
			пСтрока = пТаблицаЗначений.Добавить();
			пСтрока.SSCCКод       = Строка.SSCC;   
			// ++ СОК	
			РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Строка.МаркаФакт, Видпродукции);
			Если РезультатРазбора = Неопределено Тогда
				пСтрока.КодМаркировки = Строка.МаркаФакт;
			Иначе
				пСтрока.КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
			КонецЕсли;
			
			пСтрока.Номенклатура = Строка.Номенклатура;
			пСтрока.ДатаПроизводства = Строка.ДатаРозлива;
			// -- СОК

			пСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(пСтрока.КодМаркировки);
			
		КонецЦикла;
	КонецЦикла;
	
	пТаблицаЗначений.Свернуть("SSCCКод, КодМаркировки, ХешСуммаКодаМаркировки, Номенклатура, ДатаПроизводства");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", пТаблицаЗначений);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.SSCCКод КАК SSCCКод,
		|	Т.КодМаркировки КАК КодМаркировки,
		|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
		|ПОМЕСТИТЬ ВТ_ИсходныеДанные
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ответственный КАК Ответственный,
		|	Т.НаименованиеФайла КАК НаименованиеФайла,
		|	Т.Дата КАК Дата,
		|	Т.ЗаказПоставщику КАК ЗаказПоставщику,
		|	Т.SSCCКод КАК SSCCКод,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.ДатаПроизводства КАК ДатаПроизводства,
		|	Т.КодМаркировки КАК КодМаркировки,
		|	ВТ_ИсходныеДанные.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ВТ_ИсходныеДанные.КодМаркировки КАК КодМаркировки_Исходный
		|ИЗ
		|	РегистрСведений.АК_СоставПакЛиста_Сок КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
		|		ПО (Т.КодМаркировки = ВТ_ИсходныеДанные.КодМаркировки
		|			И Т.ХешСуммаКодаМаркировки = ВТ_ИсходныеДанные.ХешСуммаКодаМаркировки)
		|ГДЕ
		|	Т.ЗаказПоставщику = &ЗаказПоставщику
		|ИТОГИ
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(ЗаказПоставщику)
		|ПО
		|	Ответственный,
		|	НаименованиеФайла";
			
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.ЗаказПоставщику);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		пРезультат.Ошибка = Ложь;
		
		пОбъектОбработки = РеквизитФормыВЗначение("Объект");
		пМакет = пОбъектОбработки.ПолучитьМакет("МакетВыводаОшибокПредварительногоСохранения");
		пОбластьШапки         = пМакет.ПолучитьОбласть("Шапка");
		пОбластьОтветственный = пМакет.ПолучитьОбласть("СтрокаОтветственный");
		пОбластьФайл          = пМакет.ПолучитьОбласть("СтрокаФайл");
		пОбластьКод           = пМакет.ПолучитьОбласть("СтрокаКод");
		пОбластьОшибка        = пМакет.ПолучитьОбласть("СтрокаОшибки");
		пОбластьПодвал        = пМакет.ПолучитьОбласть("Подвал");
		
		пТабличныйДокумент = Новый ТабличныйДокумент;
		пОбластьШапки.Параметры.ИмяФайла = ИмяФайла;
		пТабличныйДокумент.Вывести(пОбластьШапки);
		
		ВыборкаОтветственный = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		пШаблонОшибки = НСтр("ru='SSCC код %2 и код маркировки %1 уже загружены в систему в пак листе %3 по документу %4 пользователем %5'");
		
		Пока ВыборкаОтветственный.Следующий() Цикл
			пОбластьОтветственный.Параметры.Заполнить(ВыборкаОтветственный);
			пТабличныйДокумент.Вывести(пОбластьОтветственный);
			ВыборкаФайл = ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаФайл.Следующий() Цикл
				пОбластьФайл.Параметры.Заполнить(ВыборкаФайл);
				пТабличныйДокумент.Вывести(пОбластьФайл);
				Выборка = ВыборкаФайл.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока Выборка.Следующий() Цикл 
					Если Выборка.КодМаркировки = Выборка.КодМаркировки_Исходный Тогда
						пРезультат.Ошибка = Истина;
					Иначе
						Продолжить;
					КонецЕсли;
						
					
					пТекстОшибки = СтрШаблон(пШаблонОшибки,
						Выборка.КодМаркировки,
						Выборка.SSCCКод,
						Выборка.НаименованиеФайла,
						Выборка.ЗаказПоставщику,
						Выборка.Ответственный);
					
					пОбластьОшибка.Параметры.ТекстОшибки = пТекстОшибки;
					пТабличныйДокумент.Вывести(пОбластьОшибка);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если Не пРезультат.Ошибка Тогда
			пРезультат.Ошибка = Ложь;
			пОтветственный = Пользователи.ТекущийПользователь();
			пДата = ТекущаяДатаСеанса();
			
			Для Каждого пСтрока Из пТаблицаЗначений Цикл
				пЗапись = РегистрыСведений.АК_СоставПакЛиста_Сок.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(пЗапись, пСтрока);
				пЗапись.НаименованиеФайла = ИмяФайла;
				пЗапись.Ответственный     = пОтветственный;
				пЗапись.Дата              = пДата;
				пЗапись.ЗаказПоставщику   = Объект.ЗаказПоставщику;
				пЗапись.Записать();
			КонецЦикла;	
		КонецЕсли;
		
		пТабличныйДокумент.Вывести(пОбластьПодвал);
		пРезультат.ТабличныйДокумент = пТабличныйДокумент;
	Иначе
		пРезультат.Ошибка = Ложь;
		пОтветственный = Пользователи.ТекущийПользователь();
		пДата = ТекущаяДатаСеанса();
		
		Для Каждого пСтрока Из пТаблицаЗначений Цикл
			пЗапись = РегистрыСведений.АК_СоставПакЛиста_Сок.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(пЗапись, пСтрока);
			пЗапись.НаименованиеФайла = ИмяФайла;
			пЗапись.Ответственный     = пОтветственный;
			пЗапись.Дата              = пДата;
			пЗапись.ЗаказПоставщику   = Объект.ЗаказПоставщику;
			пЗапись.Записать();
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат пРезультат;

КонецФункции // СохранитьПредварительноНаСервере()

&НаСервере
Функция СоздатьВременнуюТаблицу()

	Перем ВременнаяТаблица, Массив, НоменклатураМассив, Число_4_0, ШтрихкодыУпаковокТоваровМассив;
	
	ШтрихкодыУпаковокТоваровМассив = Новый Массив;
	ШтрихкодыУпаковокТоваровМассив.Добавить(Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	НоменклатураМассив = Новый Массив;
	НоменклатураМассив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Число_4_0 = Новый ОписаниеТипов(Массив, , , Новый КвалификаторыЧисла(4,0));  
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Число_10_0 = Новый ОписаниеТипов(Массив, , , Новый КвалификаторыЧисла(10,0));
	
	Строка_22 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(22));
	Строка_14 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(14));
	Строка_35 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(35)); 
	Строка_100 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	
	ВременнаяТаблица = Новый ТаблицаЗначений;
	ВременнаяТаблица.Колонки.Добавить("КодКоробки", Строка_22);    // Box code (SSCC)
	ВременнаяТаблица.Колонки.Добавить("КодМаркировки", Строка_35); //    
	ВременнаяТаблица.Колонки.Добавить("ШтрихкодУпаковки",		 	Новый ОписаниеТипов(ШтрихкодыУпаковокТоваровМассив), 	"SSCC"); 
	ВременнаяТаблица.Колонки.Добавить("Номенклатура",	Новый ОписаниеТипов(НоменклатураМассив), 				"Номенклатура"); 
	ВременнаяТаблица.Колонки.Добавить("GTINПлан",	 	Строка_14,							"GTIN План");
	//ВременнаяТаблица.Колонки.Добавить("МаркаПлан",	 	Новый ОписаниеТипов(Число_4_0),		 					"Марка План");
	ВременнаяТаблица.Колонки.Добавить("GTINФакт",	 	Строка_14,							"GTIN Факт");
	ВременнаяТаблица.Колонки.Добавить("Количество",	 	Новый ОписаниеТипов(Число_4_0),		 					"Марка План"); 
	ВременнаяТаблица.Колонки.Добавить("Сопоставлено",	 	Новый ОписаниеТипов(Число_4_0),		 				"Сопоставлено");  
	ВременнаяТаблица.Колонки.Добавить("ПлановоеКоличество",	Новый ОписаниеТипов(Число_4_0),		 				"Плановое количество");
	ВременнаяТаблица.Колонки.Добавить("НеСопоставлено",	 	Новый ОписаниеТипов(Число_4_0),		 				"Не сопоставлено");
	ВременнаяТаблица.Колонки.Добавить("ФактическоеКоличество",	 	Новый ОписаниеТипов(Число_4_0),				"Фактическое количество");
	ВременнаяТаблица.Колонки.Добавить("МаркаФакт");  
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки",	 	Новый ОписаниеТипов(Число_10_0),		 				"Номер строки");
	ВременнаяТаблица.Колонки.Добавить("ПолныйКод", Строка_100);
	
	//++  
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	Типы = Новый ОписаниеТипов(МассивТипов, , , , , , );
	ВременнаяТаблица.Колонки.Добавить("ДатаРозлива", Типы, "Дата розлива");
	
	ВременнаяТаблица.Индексы.Добавить("ШтрихкодУпаковки, GTINПлан, GTINФакт, Номенклатура, НомерСтроки");
	
	//ВременнаяТаблица.Колонки.Добавить("ДатаРозлива",	 	Новый КвалификаторыДаты(ЧастиДаты.Дата),		 				"Дата розлива");
	//--
	Возврат ВременнаяТаблица;

КонецФункции // СоздатьВременнуюТаблицу()

// Очищает предварительные данные на сервере
//
&НаСервере
Процедура ПредварительныеДанные_ОчиститьНаСервере()

	пПредварительныеДанные = РеквизитФормыВЗначение("ПредварительныеДанные");
	
	пВыбранныеЗначения = Новый ТаблицаЗначений;
	пВыбранныеЗначения.Колонки.Добавить("НаименованиеФайла", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	пВыбранныеЗначения.Колонки.Добавить("Ответственный",     Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого Строка Из пПредварительныеДанные.Строки Цикл
		Если Строка.Выбран Тогда
			пСтрока = пВыбранныеЗначения.Добавить();
			пСтрока.НаименованиеФайла = Строка.НаименованиеФайла;
			пСтрока.Ответственный     = Строка.Ответственный;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", пВыбранныеЗначения);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.НаименованиеФайла КАК НаименованиеФайла,
		|	Т.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ ВТ_ВыбранныеСтроки
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АК_СоставПакЛиста_Сок.SSCCКод КАК SSCCКод,
		|	АК_СоставПакЛиста_Сок.КодМаркировки КАК КодМаркировки,
		|	АК_СоставПакЛиста_Сок.НаименованиеФайла КАК НаименованиеФайла,
		|	АК_СоставПакЛиста_Сок.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.АК_СоставПакЛиста_Сок КАК АК_СоставПакЛиста_Сок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыбранныеСтроки КАК ВТ_ВыбранныеСтроки
		|		ПО АК_СоставПакЛиста_Сок.Ответственный = ВТ_ВыбранныеСтроки.Ответственный
		|			И АК_СоставПакЛиста_Сок.НаименованиеФайла = ВТ_ВыбранныеСтроки.НаименованиеФайла";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		пЗапись = РегистрыСведений.АК_СоставПакЛиста_Сок.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(пЗапись, Выборка);
		пЗапись.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ПредварительныеДанные_ОчиститьНаСервере()

// Заполняет предварительные данные на сервере
//
&НаСервере
Процедура ПредварительныеДанные_Заполнить()

	пПредварительныеДанные = РеквизитФормыВЗначение("ПредварительныеДанные");
	
	пВыбранныеЗначения = Новый ТаблицаЗначений;
	пВыбранныеЗначения.Колонки.Добавить("НаименованиеФайла", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	пВыбранныеЗначения.Колонки.Добавить("Ответственный",     Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого Строка Из пПредварительныеДанные.Строки Цикл
		пСтрока = пВыбранныеЗначения.Добавить();
		пСтрока.НаименованиеФайла = Строка.НаименованиеФайла;
		пСтрока.Ответственный     = Строка.Ответственный;
	КонецЦикла;
	
	пПредварительныеДанные.Строки.Очистить();
	
	пДерево = РеквизитФормыВЗначение("Дерево");
	
	пТаблицаЗначений = Новый ТаблицаЗначений;
	пТаблицаЗначений.Колонки.Добавить("SSCCКод",       Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	пТаблицаЗначений.Колонки.Добавить("КодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	// ++ СОК
	пТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	пТаблицаЗначений.Колонки.Добавить("ДатаПроизводства", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Видпродукции = ВидПродукцииИС;
	// -- СОК
	
	
	Для Каждого КорневаяСтрокаДерева Из пДерево.Строки Цикл
		Для Каждого Строка Из КорневаяСтрокаДерева.Строки Цикл
			пСтрока = пТаблицаЗначений.Добавить();
			пСтрока.SSCCКод       = Строка.SSCC;
			пСтрока.КодМаркировки = Строка.МаркаФакт; 
			// ++ СОК	
			РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Строка.МаркаФакт, Видпродукции);
			Если РезультатРазбора = Неопределено Тогда
				пСтрока.КодМаркировки = Строка.МаркаФакт;
			Иначе
				пСтрока.КодМаркировки = РезультатРазбора.НормализованныйКодМаркировки;
			КонецЕсли;
			
			пСтрока.Номенклатура = Строка.Номенклатура;
			пСтрока.ДатаПроизводства = Строка.ДатаРозлива;
			// -- СОК
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", пВыбранныеЗначения);
	Запрос.УстановитьПараметр("Дерево",  пТаблицаЗначений);
	Запрос.УстановитьПараметр("НаименованиеФайла", ИмяФайла);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НаименованиеФайла КАК НаименованиеФайла,
	|	Т.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ВыбранныеСтроки
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.SSCCКод КАК SSCCКод,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.ДатаПроизводства КАК ДатаПроизводства,
	|	Т.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ВТ_Дерево
	|ИЗ
	|	&Дерево КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	НЕ ВТ_ВыбранныеСтроки.НаименованиеФайла ЕСТЬ NULL КАК Выбран,
	|	ВложенныйЗапрос.НаименованиеФайла КАК НаименованиеФайла,
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	|	ВложенныйЗапрос.SSCCКод КАК SSCCКод,
	|	ВложенныйЗапрос.КодМаркировки КАК КодМаркировки,
	|	ВложенныйЗапрос.ДатаПроизводства КАК ДатаПроизводства,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		АК_СоставПакЛиста_Сок.НаименованиеФайла КАК НаименованиеФайла,
	|		АК_СоставПакЛиста_Сок.Ответственный КАК Ответственный,
	|		АК_СоставПакЛиста_Сок.Дата КАК Дата,
	|		АК_СоставПакЛиста_Сок.SSCCКод КАК SSCCКод,
	|		АК_СоставПакЛиста_Сок.КодМаркировки КАК КодМаркировки,
	|		АК_СоставПакЛиста_Сок.ДатаПроизводства КАК ДатаПроизводства,
	|		АК_СоставПакЛиста_Сок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.АК_СоставПакЛиста_Сок КАК АК_СоставПакЛиста_Сок
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дерево КАК ВТ_Дерево
	|			ПО АК_СоставПакЛиста_Сок.SSCCКод = ВТ_Дерево.SSCCКод
	|				И АК_СоставПакЛиста_Сок.КодМаркировки = ВТ_Дерево.КодМаркировки
	|				И АК_СоставПакЛиста_Сок.ДатаПроизводства = ВТ_Дерево.ДатаПроизводства
	|				И АК_СоставПакЛиста_Сок.Номенклатура = ВТ_Дерево.Номенклатура
	|	ГДЕ
	|		(НЕ ВТ_Дерево.SSCCКод ЕСТЬ NULL
	|				ИЛИ АК_СоставПакЛиста_Сок.НаименованиеФайла = &НаименованиеФайла)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АК_СоставПакЛиста_Сок.НаименованиеФайла,
	|		АК_СоставПакЛиста_Сок.Ответственный,
	|		АК_СоставПакЛиста_Сок.Дата,
	|		АК_СоставПакЛиста_Сок.SSCCКод,
	|		АК_СоставПакЛиста_Сок.КодМаркировки,
	|		АК_СоставПакЛиста_Сок.ДатаПроизводства,
	|		АК_СоставПакЛиста_Сок.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыбранныеСтроки КАК ВТ_ВыбранныеСтроки
	|		ПО (ВТ_ВыбранныеСтроки.НаименованиеФайла = ВложенныйЗапрос.НаименованиеФайла)
	|			И (ВТ_ВыбранныеСтроки.Ответственный = ВложенныйЗапрос.Ответственный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Результат.Выбран КАК Выбран,
	|	ВТ_Результат.НаименованиеФайла КАК НаименованиеФайла,
	|	ВТ_Результат.Дата КАК Дата,
	|	ВТ_Результат.Ответственный КАК Ответственный,
	|	ВТ_Результат.SSCCКод КАК SSCCКод,
	|	ВТ_Результат.КодМаркировки КАК КодМаркировки,
	|	ВТ_Результат.ДатаПроизводства КАК ДатаРозлива,
	|	ВТ_Результат.Номенклатура КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВТ_Результат.НомерЗаписи) КАК НомерЗаписи,
	|		ВТ_Результат.Выбран КАК Выбран,
	|		ВТ_Результат.НаименованиеФайла КАК НаименованиеФайла,
	|		ВТ_Результат.Дата КАК Дата,
	|		ВТ_Результат.Ответственный КАК Ответственный
	|	ИЗ
	|		ВТ_Результат КАК ВТ_Результат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Результат.НаименованиеФайла,
	|		ВТ_Результат.Ответственный,
	|		ВТ_Результат.Дата,
	|		ВТ_Результат.Выбран) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Результат КАК ВТ_Результат
	|		ПО (ВложенныйЗапрос.Выбран = ВТ_Результат.Выбран
	|				И ВложенныйЗапрос.НаименованиеФайла = ВТ_Результат.НаименованиеФайла)
	|ИТОГИ
	|	МАКСИМУМ(Выбран),
	|	МАКСИМУМ(НаименованиеФайла),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Ответственный)
	|ПО
	|	НомерЗаписи";
	
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаГруппа.Следующий() Цикл
		СтрокаРодитель = пПредварительныеДанные.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРодитель, ВыборкаГруппа);
		СтрокаРодитель.ЭтоРодитель = Истина;
		
		Выборка = ВыборкаГруппа.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Строка = СтрокаРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(пПредварительныеДанные, "ПредварительныеДанные");

КонецПроцедуры // ПредварительныеДанные_Заполнить()

// Запускает проверки при изменении заказа поставщику
//
&НаСервере
Процедура ЗаказПоставщикуПриИзмененииНаСервере()

	Если Не СодержитПодходящуюПродукцию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В выбранном документе нет маркируемых товаров для которых предназначена обработка.");
	КонецЕсли;

КонецПроцедуры // ЗаказПоставщикуПриИзмененииНаСервере()

// ++ АК Остапенко ЕА

&НаСервере
// Проверка исходных данных при чтении файла
//
// Параметры:
//	ВременнаяТаблица - ТаблицаЗначений, см. функцию СоздатьВременнуюТаблицу
//	ТаблицаОшибок - ТаблицаЗначений, свод ошибок по строкам исходного файла
//  	*НомерСтроки
//  	*ШтрихкодУпаковки 
//  	*КодМаркировки 
//  	*GTIN 
//  	*АК_НомерSAP
//  	*Наименование
//  	*Количество 
//  	*ТекстОшибки 
//	Отказ - Булево, признак прекращения операции
Процедура ВыполнитьПроверкиЛентыОптимизирование(ВременнаяТаблица, ТаблицаОшибок, Отказ)

	СписокКодовМаркировки = ВременнаяТаблица.ВыгрузитьКолонку("КодМаркировки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки, 
	|	Таблица.КодКоробки КАК КодКоробки,
	|	Таблица.КодМаркировки КАК КодМаркировки,
	|	Таблица.GTINФакт КАК GTINФакт,
	|	Таблица.GTINПлан КАК GTINПлан,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.ПолныйКод КАК ПолныйКод,
	|	Таблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ ИсходныйСписокКодов
	|ИЗ
	|	&ТаблицаКодыМаркировок КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ ВТ_Штрихкоды
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&КодМаркировки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаркировкаТоваровИСМПШтрихкодыУпаковок.Ссылка КАК ВведенаВОборот,
	|	ВТ_Штрихкоды.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ ВведениеВОборот
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК МаркировкаТоваровИСМПШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Штрихкоды КАК ВТ_Штрихкоды
	|		ПО (ВТ_Штрихкоды.Ссылка = МаркировкаТоваровИСМПШтрихкодыУпаковок.ШтрихкодУпаковки)
	|ГДЕ
	|	МаркировкаТоваровИСМПШтрихкодыУпаковок.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование КАК ДокументОснование,
	|	РеализацияТоваровУслуг.Ссылка КАК ЕстьРеализация,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки
	|ПОМЕСТИТЬ ЕстьРеализации
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ((ВЫРАЗИТЬ(ПулКодовМаркировкиСУЗ.ДокументОснование КАК Документ.ЗаказПоставщику)) = РеализацияТоваровУслуг.АК_ОснованиеПТУ.ЗаказПоставщику)
	|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПулКодовМаркировкиСУЗ.ДокументОснование) = ТИП(Документ.ЗаказПоставщику)
	|	И ПулКодовМаркировкиСУЗ.КодМаркировки В(&КодМаркировки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК ВключенВПакЛист,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ШтрихкодЗначениеШтрихкода
	|ПОМЕСТИТЬ ВключенВПакЛист
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода В(&КодМаркировки)
	|	И НЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ПометкаУдаления
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныйСписокКодов.ПолныйКод КАК ПолныйКод,
	|	СУММА(1) КАК Дубли
	|ПОМЕСТИТЬ ЕстьДубли
	|ИЗ
	|	ИсходныйСписокКодов КАК ИсходныйСписокКодов
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныйСписокКодов.ПолныйКод
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныйСписокКодов.КодМаркировки КАК КодМаркировкиИсходный,
	//|	ИсходныйСписокКодов.ХешСуммаКодаМаркировки КАК ХешСуммаИсходная,
	|	ИсходныйСписокКодов.GTINФакт КАК GTINФакт,
	|	ИсходныйСписокКодов.GTINПлан КАК GTINПлан,
	|	ИсходныйСписокКодов.НомерСтроки КАК НомерСтроки,
	|	ИсходныйСписокКодов.КодКоробки КАК КодКоробки,
	|	ИсходныйСписокКодов.Номенклатура КАК Номенклатура,
	|	ИсходныйСписокКодов.ПолныйКод КАК ПолныйКод,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ДокументОснование КАК ДокументОснование,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
	//|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки КАК ХешСуммаРегистра,
	|	ВведениеВОборот.ВведенаВОборот КАК ВведенаВОборот,
	|	ВключенаВПакЛист.ВключенВПакЛист КАК ВключенВПакЛист,
	|	ЕстьРеализации.ЕстьРеализация КАК ЕстьРеализация,
	|	ВключенаВПакЛист.ШтрихкодЗначениеШтрихкода КАК ВключенаВПакЛистЗначениеШтрихкода,
	|	ВведениеВОборот.ЗначениеШтрихкода КАК ВведенаВОборотЗначениеШтрихкода,
	|	ЕстьДубли.Дубли КАК Дубли
	|ИЗ
	|	ИсходныйСписокКодов КАК ИсходныйСписокКодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВведениеВОборот КАК ВведениеВОборот
	|			ПО (ВведениеВОборот.ЗначениеШтрихкода = ПулКодовМаркировкиСУЗ.КодМаркировки)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЕстьРеализации КАК ЕстьРеализации
	|			ПО ПулКодовМаркировкиСУЗ.ДокументОснование = ЕстьРеализации.ДокументОснование
	|				И ПулКодовМаркировкиСУЗ.КодМаркировки = ЕстьРеализации.КодМаркировки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВключенВПакЛист КАК ВключенаВПакЛист
	|			ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ВключенаВПакЛист.ШтрихкодЗначениеШтрихкода 
	//|			ЛЕВОЕ СОЕДИНЕНИЕ ЕстьДубли КАК ЕстьДубли
	//|			ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ЕстьДубли.КодМаркировки
	|		ПО (ИсходныйСписокКодов.КодМаркировки = ПулКодовМаркировкиСУЗ.КодМаркировки
	|			И (ИсходныйСписокКодов.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|				ИЛИ &ОтключитьПроверку)
	|			И ТИПЗНАЧЕНИЯ(ПулКодовМаркировкиСУЗ.ДокументОснование) = ТИП(Документ.ЗаказПоставщику))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьДубли КАК ЕстьДубли
	|			ПО (ИсходныйСписокКодов.ПолныйКод = ЕстьДубли.ПолныйКод)
	|УПОРЯДОЧИТЬ ПО 
	|	ИсходныйСписокКодов.КодМаркировки
	|";
	//|		ПО ИсходныйСписокКодов.КодМаркировки = ПулКодовМаркировкиСУЗ.КодМаркировки
	//|ГДЕ
	//|	ТИПЗНАЧЕНИЯ(ПулКодовМаркировкиСУЗ.ДокументОснование) = ТИП(Документ.ЗаказПоставщику)
	//|	И ПулКодовМаркировкиСУЗ.КодМаркировки В(&КодМаркировки)";
	Запрос.УстановитьПараметр("КодМаркировки", СписокКодовМаркировки);
	Запрос.УстановитьПараметр("ТаблицаКодыМаркировок", ВременнаяТаблица);
	Запрос.УстановитьПараметр("ОтключитьПроверку", ОтключитьПроверкуКодовПоРегистру);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПредКодМаркировки = "";
	ПредПолныйКодДляСравнения = "";
	Найдено = Ложь;
	
	Пока Выборка.Следующий() Цикл
		ОтказПриПроверке = Ложь; 
		МассивОшибок = Новый Массив;
		
		Если Не ЗначениеЗаполнено(Выборка.КодМаркировки) 
			И Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			
			//МассивВозможныхСоответствий = ВозможныеОшибочныеКодыМаркировки(Выборка.ПолныйКод);
			МассивВозможныхСоответствий = ВозможныеОшибочныеКодыМаркировки(Выборка.КодМаркировкиИсходный);

			СтрОшибок = "- Код марки из исходных данных не найден в Пуле кодов маркировки. Код марки из файла: " 
											+ Выборка.КодМаркировкиИсходный;
			//СтрОшибок = СтрОшибок + " 
			//		|Полный код из файла: "
			//				+ Выборка.ПолныйКод;
			Если МассивВозможныхСоответствий.Количество() > 0 Тогда
				СтрОшибок = СтрОшибок + "
						|- Полный код маркировки не соответствует марке в базе.";
				ПолныйКодДляСравнения = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Выборка.ПолныйКод);
				Для Каждого ВозможноеСоответствие Из МассивВозможныхСоответствий Цикл
					//СтрОшибок = СтрОшибок + Символы.ПС 
					//		+ "Код маркировки: " + ВозможноеСоответствие.КодМаркировки;
					//СтрОшибок = СтрОшибок + Символы.ПС 
					//		+ "Полный код:               " + ВозможноеСоответствие.ПолныйКодМаркировки;
					ШТИзРегистраБезXML = ВозможноеСоответствие.ПолныйКодМаркировки;
					РезультатСравненияПолногоКодаНРЕГ = 
							(НРЕГ(ПолныйКодДляСравнения) = НРЕГ(ШТИзРегистраБезXML));
					Если РезультатСравненияПолногоКодаНРЕГ Тогда
						СтрОшибок = СтрОшибок + Символы.ПС 
							+ "Код маркировки из файла: " + ПолныйКодДляСравнения;
						СтрОшибок = СтрОшибок + Символы.ПС 
							+ "Код маркировки из 1С:     " + ШТИзРегистраБезXML;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			МассивОшибок.Добавить(СтрОшибок);

			Отказ = Истина;
		
		Иначе
			ШТИзРегистра = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Выборка.ПолныйКодМаркировки);
			ШТИзРегистраБезНедопустимых = АК_УдалитьНедопустимыеСимволыXML(ШТИзРегистра);
			ШТИзРегистраБезXML = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ШТИзРегистра);
			РезультатРазбораПакета1 = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ШТИзРегистра);
			
			ПолныйКодДляСравнения = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Выборка.ПолныйКод);
			
			//***************************************************
			РезультатСравненияКодаНРЕГ = 
					(НРЕГ(Выборка.КодМаркировки) = НРЕГ(РезультатРазбораПакета1.НормализованныйКодМаркировки));
			РезультатСравненияПолногоКодаНРЕГ = 
					(НРЕГ(ПолныйКодДляСравнения) = НРЕГ(ШТИзРегистраБезXML));
			
			РезультатСравненияКода = (Выборка.КодМаркировки = РезультатРазбораПакета1.НормализованныйКодМаркировки);
			РезультатСравненияПолногоКода = (ПолныйКодДляСравнения = ШТИзРегистраБезXML);
			
			Если ОтключитьПроверкуКодовПоРегистру Тогда
				
				//Если ЗначениеЗаполнено(РезультатРазбораПакета1) 
				//	//И НЕ РезультатСравненияКодаНРЕГ 
				//	И НЕ РезультатСравненияКода Тогда 

					// ЕМ **********************
					Если ПредКодМаркировки <> "" И НРЕГ(Выборка.КодМаркировкиИсходный) <> ПредКодМаркировки Тогда
						Если НЕ Найдено Тогда
					
							МассивОшибок.Добавить("- Полный код марки не найден в базе.
							|Код марки из файла: " + ПредКодМаркировки +"
							|Полный код марки из файла: " + ПредПолныйКодДляСравнения);
							
							НоваяСтрокаОшибки = ТаблицаОшибок.Добавить(); 
							НоваяСтрокаОшибки.НомерСтроки = Выборка.НомерСтроки - 1;
							//НоваяСтрокаОшибки.ШтрихкодУпаковки = Выборка.КодКоробки;
							НоваяСтрокаОшибки.КодМаркировки = ПредКодМаркировки;  
							//НоваяСтрокаОшибки.GTIN = Выборка.GTINФакт;
							//НоваяСтрокаОшибки.АК_НомерSAP = Выборка.Номенклатура.АК_SAPНомер;
							//НоваяСтрокаОшибки.Наименование = Выборка.Номенклатура.Наименование;
							НоваяСтрокаОшибки.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС + Символы.ПС);
									
							Отказ = Истина;
							
							МассивОшибок = Новый Массив;
		
						КонецЕсли;
					КонецЕсли;
					
					ПредКодМаркировки = НРЕГ(Выборка.КодМаркировкиИсходный);
					ПредПолныйКодДляСравнения = ПолныйКодДляСравнения;
					Найдено = Ложь;
					//********************** ЕМ 

					Если РезультатСравненияКодаНРЕГ И НЕ РезультатСравненияПолногоКодаНРЕГ Тогда
						Продолжить;
					КонецЕсли;
					
					//МассивОшибок.Добавить("- Код марки не соответствует марке в базе.
					//|Код марки из файла: " + Выборка.КодМаркировкиИсходный +"
					//|Код марки из 1С: " 
					//		+ ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Выборка.КодМаркировки));
							
					//Отказ = Истина;
					//********************** ЕМ 

					Если РезультатСравненияКодаНРЕГ И РезультатСравненияПолногоКодаНРЕГ Тогда
						Найдено = Истина;
					КонецЕсли;
		
				//КонецЕсли;
				
				Если НЕ РезультатСравненияПолногоКода Тогда
					Если НЕ РезультатСравненияПолногоКодаНРЕГ Тогда
						
						МассивОшибок.Добавить("- Полный код марки не соответствует марке в базе.
						|Код марки из файла: " + ПолныйКодДляСравнения +"
						|Код марки из 1С: " + ШТИзРегистраБезXML);

						Отказ = Истина;
					Иначе
						ВремСтрока = ВременнаяТаблица.Найти(Выборка.НомерСтроки, "НомерСтроки");
						ВремСтрока.ПолныйКод = ШТИзРегистраБезXML;
						ВремСтрока.КодМаркировки = РезультатРазбораПакета1.НормализованныйКодМаркировки;
					КонецЕсли;
		
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(РезультатРазбораПакета1) И НЕ РезультатСравненияКода Тогда
					МассивОшибок.Добавить("- Код марки не соответствует марке в базе.
					|Код марки из файла: " + Выборка.КодМаркировкиИсходный +"
					|Код марки из 1С: " 
							+ ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Выборка.КодМаркировки));

					Отказ = Истина;
		
				КонецЕсли;
				
				Если НЕ РезультатСравненияПолногоКода Тогда
					МассивОшибок.Добавить("- Полный код марки не соответствует марке в базе.
					|Код марки из файла: " + ПолныйКодДляСравнения +"
					|Код марки из 1С: " + ШТИзРегистраБезXML);

					Отказ = Истина;
		
				КонецЕсли;
				
			КонецЕсли;
							
			//Если ЗначениеЗаполнено(РезультатРазбораПакета1) И НЕ РезультатСравненияКода Тогда
			//	МассивОшибок.Добавить("- Код марки не соответствует марке в базе.
			//	|Код марки из файла: " + Выборка.КодМаркировки +"
			//	|Код марки из 1С: " + ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Выборка.КодМаркировки));
			//КонецЕсли;
			////ИначеЕсли ШТИзРегистраБезНедопустимых <> Выборка.ПолныйКод Тогда
			//Если НЕ РезультатСравненияПолногоКода Тогда
			//	МассивОшибок.Добавить("- Полный код марки не соответствует марке в базе.
			//	|Код марки из файла: " + ПолныйКодДляСравнения +"
			//	|Код марки из 1С: " + ШТИзРегистраБезXML);
			//КонецЕсли;
			
			//***************************************************
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.ВведенаВОборот) Тогда
			Если Выборка.КодМаркировкиИсходный = Выборка.ВведенаВОборотЗначениеШтрихкода  Тогда 			
				МассивОшибок.Добавить("- Код марки уже введен в оборот. Код марки: " + Выборка.КодМаркировкиИсходный + Символы.ПС + Выборка.ВведенаВОборот);

				Отказ = Истина;
		
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЕстьРеализация) Тогда 
			Если ОтключитьПроверкуКодовПоРегистру Тогда
				РезультатСравненияКода = (НРЕГ(Выборка.КодМаркировкиИсходный) = НРЕГ(Выборка.КодМаркировки));
			Иначе
				РезультатСравненияКода = (Выборка.КодМаркировкиИсходный = Выборка.КодМаркировки);
			КонецЕсли;
			Если РезультатСравненияКода Тогда 
				МассивОшибок.Добавить("- Код упаковки числится в Заказе поставщику с Реализацией товаров. Код марки: " 
					+ Выборка.КодМаркировкиИсходный 
					+ Символы.ПС + Строка(Выборка.ДокументОснование) + " -> " + Строка(Выборка.ЕстьРеализация));

				Отказ = Истина;
		
			КонецЕсли;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.ВключенВПакЛист) Тогда
			Если Выборка.КодМаркировкиИсходный = Выборка.ВключенаВПакЛистЗначениеШтрихкода Тогда
				МассивОшибок.Добавить("- Код марки уже включили в пак лист. Код марки: " + Выборка.КодМаркировкиИсходный + Символы.ПС + Выборка.ВключенВПакЛист);

				Отказ = Истина;
		
			КонецЕсли; 
		КонецЕсли;
	
		Если ПустаяСтрока(Выборка.GTINПлан) Тогда 
			МассивОшибок.Добавить("- Код марки не привязан данному GTIN: " + Выборка.GTINФакт + ", для заказа: " + Строка(Объект.ЗаказПоставщику));

			Отказ = Истина;
		
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Выборка.Дубли)
			И Выборка.Дубли > 1
			Тогда 
			МассивОшибок.Добавить("- Код марки дублируется: " + Выборка.КодМаркировкиИсходный);

			Отказ = Истина;
		
		КонецЕсли;
	
		Если Выборка.GTINПлан <> Выборка.GTINФакт Тогда 
			МассивОшибок.Добавить("- Плановый GTIN " + Выборка.GTINПлан + " не совпадает с фактическим из файла " + Выборка.GTINФакт);
			
			Отказ = Истина;
		
		КонецЕсли;
		
		//Если НЕ Отказ Тогда
		//	Продолжить;
		//КонецЕсли;  
		
		Если МассивОшибок.Количество() > 0 Тогда
			НоваяСтрокаОшибки = ТаблицаОшибок.Добавить(); 
			НоваяСтрокаОшибки.НомерСтроки = Выборка.НомерСтроки;
			НоваяСтрокаОшибки.ШтрихкодУпаковки = Выборка.КодКоробки;
			НоваяСтрокаОшибки.КодМаркировки = Выборка.КодМаркировкиИсходный;  
			НоваяСтрокаОшибки.GTIN = Выборка.GTINФакт;
			НоваяСтрокаОшибки.АК_НомерSAP = Выборка.Номенклатура.АК_SAPНомер;
			НоваяСтрокаОшибки.Наименование = Выборка.Номенклатура.Наименование;
			НоваяСтрокаОшибки.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС + Символы.ПС);
		КонецЕсли;  
	КонецЦикла; 
	
	// последняя проверка после цикла - если не найдена марка
	Если ОтключитьПроверкуКодовПоРегистру И НЕ Найдено И ПредКодМаркировки <> "" Тогда
					
		ТекстОшибки = "- Полный код марки не найден в базе.
		|Код марки из файла: " + ПредКодМаркировки +"
		|Полный код марки из файла: " + ПредПолныйКодДляСравнения;
				
		Отказ = Истина;

		НоваяСтрокаОшибки = ТаблицаОшибок.Добавить(); 
		НоваяСтрокаОшибки.НомерСтроки = Выборка.НомерСтроки;
		НоваяСтрокаОшибки.ШтрихкодУпаковки = Выборка.КодКоробки;
		НоваяСтрокаОшибки.КодМаркировки = ПредКодМаркировки;  
		НоваяСтрокаОшибки.GTIN = Выборка.GTINФакт;
		НоваяСтрокаОшибки.АК_НомерSAP = Выборка.Номенклатура.АК_SAPНомер;
		НоваяСтрокаОшибки.Наименование = Выборка.Номенклатура.Наименование;
		НоваяСтрокаОшибки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;  

КонецПроцедуры // ВыполнитьПроверкиЛентыОптимизирование()

Функция ВозможныеОшибочныеКодыМаркировки(Знач КодМаркировки)
	
	МассивВозможныхСоответствий = Новый Массив;
	
	ПараКодов = Новый Структура("КодМаркировки, ПолныйКодМаркировки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		//|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки = &ПолныйКодМаркировки";
		|	ПулКодовМаркировкиСУЗ.КодМаркировки = &КодМаркировки";
	
	Запрос.УстановитьПараметр("КодМаркировки", КодМаркировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		ПараКодов.КодМаркировки = ВыборкаДетальныеЗаписи.КодМаркировки;
		
		ШТИзРегистра = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(ВыборкаДетальныеЗаписи.ПолныйКодМаркировки);
		ШТИзРегистраБезXML = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ШТИзРегистра);
		ПараКодов.ПолныйКодМаркировки = ШТИзРегистраБезXML;
		
		МассивВозможныхСоответствий.Добавить(ПараКодов);
	КонецЦикла;
	
	Возврат МассивВозможныхСоответствий;
	
КонецФункции  // ВозможныеОшибочныеКодыМаркировки

// Процедура - Заполнить данные плановыми показателями оптимизация
//
// Параметры:
//  ВременнаяТаблица - ТаблицаЗначений	- см.СоздатьВременнуюТаблицу
//  ТаблицаОшибок	 - ТаблицаЗначений :
//  	*НомерСтроки
//  	*ШтрихкодУпаковки 
//  	*КодМаркировки 
//  	*GTIN 
//  	*АК_НомерSAP
//  	*Наименование
//  	*Количество 
//  	*ТекстОшибки
//  Отказ			 - Булево - определяет, найдены ли ошибки.
//
&НаСервере
Процедура ЗаполнитьДанныеПлановымиПоказателямиОптимизация(ВременнаяТаблица, ТаблицаОшибок, Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|Таблица.НомерСтроки КАК НомерСтроки,
	|Таблица.КодКоробки КАК КодКоробки,
	|Таблица.КодМаркировки КАК КодМаркировки,
	|Таблица.ДатаРозлива КАК ДатаРозлива,
	|Таблица.ПолныйКод КАК ПолныйКод,
	|Таблица.GTINФакт КАК GTINФакт
	|ПОМЕСТИТЬ ВТ_СчитанныеДанные
	|ИЗ
	|	&ВременнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АК_ПлановыеШтрихкодыУпаковок.ЗаказПоставщику КАК ЗаказПоставщику,
	|	АК_ПлановыеШтрихкодыУпаковок.ШтрихкодУпаковкиТоваров КАК ШтрихкодУпаковки,
	|	АК_ПлановыеШтрихкодыУпаковок.ШтрихкодУпаковкиТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Коробка
	|ИЗ
	|	ВТ_СчитанныеДанные КАК ВТ_СчитанныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПлановыеШтрихкодыУпаковок КАК АК_ПлановыеШтрихкодыУпаковок
	|		ПО (ВТ_СчитанныеДанные.КодКоробки = АК_ПлановыеШтрихкодыУпаковок.ШтрихкодУпаковкиТоваров.ЗначениеШтрихкода)
	|ГДЕ
	|	АК_ПлановыеШтрихкодыУпаковок.ЗаказПоставщику = &ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Коробка.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ВТ_Коробка.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ВТ_Коробка.Номенклатура КАК Номенклатура,
	|	АК_ПлановыеШтрихкодыУпаковок.GTIN КАК GTINПлан,
	|	АК_ПлановыеШтрихкодыУпаковок.Количество КАК Количество,
	|	ВТ_СчитанныеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТ_СчитанныеДанные.КодКоробки КАК КодКоробки,
	|	ВТ_СчитанныеДанные.КодМаркировки КАК КодМаркировки,
	|	ВТ_СчитанныеДанные.ДатаРозлива КАК ДатаРозлива,
	|	ВТ_СчитанныеДанные.ПолныйКод КАК ПолныйКод,
	|	ВТ_СчитанныеДанные.GTINФакт КАК GTINФакт
	|ИЗ
	|	ВТ_СчитанныеДанные КАК ВТ_СчитанныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Коробка КАК ВТ_Коробка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПлановыеШтрихкодыУпаковок КАК АК_ПлановыеШтрихкодыУпаковок
	|			ПО (ВТ_Коробка.ЗаказПоставщику = АК_ПлановыеШтрихкодыУпаковок.ЗаказПоставщику
	|					И ВТ_Коробка.ШтрихкодУпаковки = АК_ПлановыеШтрихкодыУпаковок.ШтрихкодУпаковкиТоваров)
	|		ПО (ВТ_СчитанныеДанные.КодКоробки = АК_ПлановыеШтрихкодыУпаковок.ШтрихкодУпаковкиТоваров.ЗначениеШтрихкода)";
	
	
	Запрос.УстановитьПараметр("ВременнаяТаблица", ВременнаяТаблица);
	Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.ЗаказПоставщику);
	
	РезультатЗапроса = Запрос.Выполнить();	                                         
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВременнаяТаблица.Очистить(); 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВозниклаОшибка = Ложь;
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаказПоставщику)
			И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ШтрихкодУпаковки)
			И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда  
			
			ТекстОшибки = СтрШаблон(НСтр("ru='Строка: %1. Не найдены данные для Штрихкода упаковки(%2)
			|для Заказа поставщику (%3)'"), 
					ВыборкаДетальныеЗаписи.НомерСтроки, ВыборкаДетальныеЗаписи.КодКоробки, Объект.ЗаказПоставщику); 
			
			ВозниклаОшибка = Истина;	
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаРозлива) Тогда  
			
			ТекстОшибки = НСтр("ru='Дата производства в файле не заполнена, либо внесена в нечитаемом формате.'"); 
			
			ВозниклаОшибка = Истина;	
		КонецЕсли;
		
		Если ВозниклаОшибка Тогда
			НоваяСтрокаОшибки = ТаблицаОшибок.Добавить(); 
			НоваяСтрокаОшибки.НомерСтроки = ВыборкаДетальныеЗаписи.НомерСтроки;
			НоваяСтрокаОшибки.ШтрихкодУпаковки = ВыборкаДетальныеЗаписи.КодКоробки;
			НоваяСтрокаОшибки.КодМаркировки = ВыборкаДетальныеЗаписи.КодМаркировки;  
			НоваяСтрокаОшибки.GTIN = ВыборкаДетальныеЗаписи.GTINФакт;
			НоваяСтрокаОшибки.АК_НомерSAP = Неопределено;
			НоваяСтрокаОшибки.Наименование = Неопределено;
			НоваяСтрокаОшибки.Количество = Неопределено;
			НоваяСтрокаОшибки.ТекстОшибки = ТекстОшибки;
			
			Отказ = Истина;
			Продолжить;
		КонецЕсли;		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеПлановымиПоказателямиОптимизация()

 //-- АК Остапенко ЕА

#Область СериализацияXML

// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//    Строка
//
Функция АК_ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ")
	
#Если Не ВебКлиент Тогда
	ПозицияНачала = 1;
	Позиция = ОбработкаСтрокиXML.НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	Пока Позиция > 0 Цикл
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		//Если НедопустимыйСимвол = Символ(232) Тогда
		Если НедопустимыйСимвол <> Символ(29) Тогда  // символ #29 допустим в полном коде маркировки
			Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		КонецЕсли;
		ПозицияНачала = Позиция + Макс(СтрДлина(СимволЗамены), 1);
		Если ПозицияНачала > СтрДлина(Текст) Тогда
			Прервать;
		КонецЕсли;
		Позиция = ОбработкаСтрокиXML.НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	КонецЦикла;
	
	Возврат Текст;
#Иначе
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	Итог = "";
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
		 Или КодСимвола > 10    И КодСимвола < 13
		 Или КодСимвола > 13    И КодСимвола < 32
		 Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Символ = СимволЗамены;
		КонецЕсли;
		Итог = Итог + Символ;
	КонецЦикла;
	
	Возврат Итог;
#КонецЕсли
	
КонецФункции

// Удаляет недопустимые символы в XML-строке.
//
// Параметры:
//  Текст - Строка - строка, в которой требуется удалить недопустимые символы.
// 
// Возвращаемое значение:
//  Строка
//
Функция АК_УдалитьНедопустимыеСимволыXML(Знач Текст)
	
	Возврат АК_ЗаменитьНедопустимыеСимволыXML(Текст, "");
	
КонецФункции

#КонецОбласти

#КонецОбласти

